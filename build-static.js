#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ –¥–ª—è Timeweb Cloud...\n');

try {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É
  if (fs.existsSync('dist')) {
    fs.rmSync('dist', { recursive: true, force: true });
  }

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É dist
  fs.mkdirSync('dist', { recursive: true });

  // –ö–æ–ø–∏—Ä—É–µ–º public —Ñ–∞–π–ª—ã
  if (fs.existsSync('public')) {
    console.log('üìÅ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ public/...');
    copyDir('public', 'dist');
  }

  // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  console.log('üî® –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É Vite...');
  execSync('npm run build', { stdio: 'inherit' });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (fs.existsSync('dist/index.html')) {
    console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const files = getAllFiles('dist');
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    
    files.forEach(file => {
      const stats = fs.statSync(file);
      const size = (stats.size / 1024).toFixed(2);
      console.log(`   üìÑ ${path.relative('dist', file)} (${size} KB)`);
    });
    
  } else {
    console.error('‚ùå –û—à–∏–±–∫–∞: index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏');
    process.exit(1);
  }

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
  process.exit(1);
}

function copyDir(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

function getAllFiles(dir) {
  const files = [];
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      files.push(...getAllFiles(fullPath));
    } else {
      files.push(fullPath);
    }
  }
  
  return files;
}
